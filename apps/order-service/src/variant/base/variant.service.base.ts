/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Variant, // @ts-ignore
  Product,
} from "@prisma/client";

export class VariantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.VariantCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantCountArgs>
  ): Promise<number> {
    return this.prisma.variant.count(args);
  }

  async variants<T extends Prisma.VariantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantFindManyArgs>
  ): Promise<Variant[]> {
    return this.prisma.variant.findMany(args);
  }
  async variant<T extends Prisma.VariantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantFindUniqueArgs>
  ): Promise<Variant | null> {
    return this.prisma.variant.findUnique(args);
  }
  async createVariant<T extends Prisma.VariantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantCreateArgs>
  ): Promise<Variant> {
    return this.prisma.variant.create<T>(args);
  }
  async updateVariant<T extends Prisma.VariantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantUpdateArgs>
  ): Promise<Variant> {
    return this.prisma.variant.update<T>(args);
  }
  async deleteVariant<T extends Prisma.VariantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VariantDeleteArgs>
  ): Promise<Variant> {
    return this.prisma.variant.delete(args);
  }

  async getProductId(parentId: string): Promise<Product | null> {
    return this.prisma.variant
      .findUnique({
        where: { id: parentId },
      })
      .productId();
  }
}
